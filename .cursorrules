# Siv3D Documentation Tools - Monorepo

## Project Overview
This monorepo provides tooling for the Siv3D documentation ecosystem. It processes Siv3D documentation (Markdown) into searchable chunks and serves them through various APIs for integration with AI tools like Claude Code and ChatGPT GPTs.

### System Architecture
```
siv3d.docs (External)
    ‚Üì (GitHub Actions Trigger)
chunk-generator ‚Üí chunks.json + code-blocks/
    ‚Üì
algolia-uploader ‚Üí Algolia Search Index
    ‚Üì
api (Cloudflare Workers) ‚Üê Users (MCP/REST/GPTs)
    ‚Üì
R2 Storage (Markdown + Code Blocks)
```

## Monorepo Structure

### üåê API Service (`api/`)
**Primary Component**: Cloudflare Workers-based API server
- **Framework**: Hono with TypeScript
- **Deployment**: Cloudflare Workers + R2 + Algolia
- **Interfaces**:
  - **MCP Server** (`/mcp`) - Model Context Protocol for Claude Code
  - **REST API** (`/api/*`) - OpenAPI-compliant endpoints for GPTs
  - **Static Assets** - OpenAPI documentation serving

**Key Files**:
```
api/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ index.ts              # Hono app with MCP and REST routing
‚îÇ   ‚îú‚îÄ‚îÄ controllers/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ mcp.ts           # MCP server implementation
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ rest.ts          # REST API controllers
‚îÇ   ‚îú‚îÄ‚îÄ lib/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ algolia.ts       # Search functionality
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ storage.ts       # R2 file operations
‚îÇ   ‚îî‚îÄ‚îÄ cloudflare.d.ts      # Cloudflare Workers type definitions
‚îú‚îÄ‚îÄ public/openapi.yaml      # REST API specification
‚îî‚îÄ‚îÄ wrangler.jsonc           # Cloudflare Workers configuration
```

### üîß Processing Actions (All Other Directories)
**GitHub Actions-based data processing pipeline**

#### `chunk-generator/`
Converts Siv3D documentation into search-optimized chunks
- **Input**: siv3d.docs directory + language + version
- **Output**: `chunks.json` + individual code block files
- **Environment**: GitHub Actions only (no CLI support)
- **Key Features**:
  - Markdown AST parsing with mdast
  - Section-based content splitting (1000 char limit)
  - MkDocs admonition support
  - Heading hierarchy preservation
  - Code block extraction

#### `algolia-uploader/`
Uploads processed chunks to Algolia search indexes
- **Input**: `chunks.json` + Algolia credentials
- **Output**: Updated Algolia search index
- **Environment**: GitHub Actions only
- **Features**:
  - Batch upload to Algolia
  - Data validation with Zod schemas
  - Language-specific index management

## Development Workflow

### API Development (`api/`)
```bash
# Local development with remote bindings
cd api
npm run dev

# Type generation for Cloudflare bindings
npm run generate-types

# Deploy to production
npm run deploy
```

### Actions Development (`chunk-generator/`, `algolia-uploader/`)
```bash
# Build for GitHub Actions
cd chunk-generator
npm run build  # Creates dist/index.js for node20 runtime

cd algolia-uploader
npm run build  # Creates dist/index.js for node20 runtime
```

### Full Pipeline Execution
Triggered by GitHub Actions workflow (`.github/workflows/deploy-docs.yml`):
1. **Input**: siv3d.docs commit hash
2. **chunk-generator**: Generate chunks for ja-jp and en-us
3. **algolia-uploader**: Upload to respective Algolia indexes
4. **R2 sync**: Upload markdown + code blocks to Cloudflare R2

## Technical Specifications

### Data Models

#### Chunk Schema (Shared across all components)
```typescript
{
  objectID: string,        // Algolia-compatible unique ID
  pageID: string,          // Page identifier (kebab-case)
  headings: string[],      // Breadcrumb hierarchy
  url: string,             // siv3d.github.io URL with anchors
  order: number,           // Within-page ordering (0, 1, 2...)
  content: string,         // Content (max 1000 characters)
  version: string          // siv3d.docs commit hash
}
```

#### CodeBlock Schema
```typescript
{
  id: string,              // Unique identifier
  pageId: string,          // Associated page
  language: string | null, // Programming language
  content: string          // Code content
}
```

### GitHub Actions Integration

#### Environment Variables (Actions Input)
**chunk-generator**:
- `INPUT_SIV3D-DOCS-DIR` - siv3d.docs directory path
- `INPUT_SIV3D-DOCS-LANGUAGE` - "en-us" or "ja-jp"  
- `INPUT_SIV3D-DOCS-VERSION` - Git commit hash
- `INPUT_CHUNKS-OUTPUT-FILE` - Output JSON file path
- `INPUT_CODE-BLOCKS-OUTPUT-DIR` - Code blocks directory
- `INPUT_DISABLE-VALIDATION` - Skip validation (optional)

**algolia-uploader**:
- `INPUT_ALGOLIA-APP-ID` - Algolia application ID
- `INPUT_ALGOLIA-API-KEY` - Algolia write API key
- `INPUT_ALGOLIA-INDEX-NAME` - Target index name
- `INPUT_CHUNKS-FILE-PATH` - Input chunks.json path
- `INPUT_SIV3D-DOCS-VERSION` - Version for metadata

### Cloudflare Workers Configuration

#### Required Bindings
```typescript
interface CloudflareBindings {
  SIV3D_DOCS_STORAGE: R2Bucket;          // File storage
  ASSETS: AssetsFetcher;                  // Static assets
  // Environment variables:
  ALGOLIA_APP_ID: string;
  ALGOLIA_SEARCH_API_KEY: string;
}
```

#### Supported Languages
- `en-us` - English documentation
- `ja-jp` - Japanese documentation

## Implementation Guidelines

### TypeScript Patterns
- **Zod Validation**: All data structures validated at runtime
- **Type Safety**: Strict TypeScript configuration across all projects
- **Error Handling**: Proper HTTP status codes and descriptive error messages
- **Environment Variables**: GitHub Actions environment variable pattern

### API Design Principles
- **MCP Compliance**: Follow Model Context Protocol specifications
- **OpenAPI**: REST endpoints documented and validated
- **Content Delivery**: Structured Markdown responses for AI consumption
- **Caching**: Leverage Cloudflare Workers edge caching

### Code Organization
- **Shared Schemas**: Common data models in `chunk-generator/schema.ts`
- **Modular Architecture**: Clear separation between parsing, processing, and serving
- **Single Responsibility**: Each action/service handles one specific task

### Constants and Limits
- `CONTENT_MAX_LENGTH = 1000` - Maximum chunk content size
- **Node.js 20** - Runtime target for all components
- **ESNext + NodeNext** - TypeScript compilation target
- **Cloudflare Workers** - Edge runtime limitations apply

## Dependencies Overview

### Core Runtime (All Projects)
- **TypeScript 5.8+** - Type system and compilation
- **Node.js 20+** - Runtime environment
- **Zod** - Runtime type validation
- **esbuild** - Fast bundling for production

### API-Specific (`api/`)
- **Hono** - Web framework for Cloudflare Workers
- **@hono/mcp** - MCP protocol implementation
- **@algolia/client-search** - Algolia search client
- **@modelcontextprotocol/sdk** - MCP server SDK

### Processing-Specific (`chunk-generator/`, `algolia-uploader/`)
- **mdast-util-from-markdown** - Markdown AST parsing
- **algoliasearch** - Algolia upload client
- **jest-diff** - Test utilities

## Special Features

### MkDocs Compatibility
- **Admonition Parsing** - Custom parser for MkDocs admonitions
- **Heading ID Generation** - Compatible with MkDocs anchor links
- **URL Generation** - Proper siv3d.github.io linking

### AI Integration
- **MCP Protocol** - Native Claude Code integration
- **Structured Output** - Markdown responses optimized for AI consumption
- **GPT Actions** - OpenAPI-compatible REST endpoints

### Production Deployment
- **Multi-stage Pipeline** - Separate data generation and API deployment
- **Version Tracking** - Git commit-based versioning
- **Multi-language Support** - Parallel processing for en-us and ja-jp